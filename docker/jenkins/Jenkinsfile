properties([
    buildDiscarder(logRotator( numToKeepStr: '70')),
    disableConcurrentBuilds(),
])
def deploy = true
def APPLICATION = "nginx"
def ENVIRONMENT = "dev"
def CHECKOUT_REPO = "https://github.com/StavrosZacharia/devops-aws.git"
def EVR_REPO = "528614166014.dkr.ecr.us-east-1.amazonaws.com"
def REGION = "us-east-1"
credentials = "c1e766bb-263b-4128-9d79-120d3d2d1531"



node(""){

    try {

        if(deploy == true){

            stage("Checkout"){
                STAGE = env.STAGE_NAME
                withCredentials([gitUsernamePassword(credentialsId: '2b001878-b483-4075-b882-df99aba4f688', gitToolName: 'Default')]) {
                    sh""" rm -rf * || true """
                    checkout scm
                }
            }

            stage("Docker"){
                STAGE = env.STAGE_NAME
                sh""" docker build -t $ECR_REPO/$APPLICATION-image:latest -f Dockerfile . """
            }

            stage("Upload to ECR"){
                STAGE = env.STAGE_NAME

                withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID', credentialsId: credentials, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh """ aws ecr get-login-password --region $REGION > ecr_login_pass """
                    ECR_PASS = readFile('ecr_login_pass').trim()

                    sh """
                        docker login -u AWS -p $ECR_PASS $ECR_REPO
                        docker tag $ECR_REPO/$APPLICATION-image:latest $ECR_REPO/$APPLICATION:$BUILD_NUMBER
                        docker push $ECR_REPO/$APPLICATION-image:latest
                        docker push $ECR_REPO/$APPLICATION-image:$BUILD_NUMBER
                        docker rmi $ECR_REPO/$APPLICATION-image:$BUILD_NUMBER $ECR_REPO/$APPLICATION-image:latest || true
                    """
                }
            }
        
            // stage("Deploy to EKS"){
            //     STAGE = env.STAGE_NAME
            //     build job: 'Deploy_to_EKS',propagate: true, parameters: [[$class: 'StringParameterValue', name: 'APPLICATION', value: "$APPLICATION"],[$class: 'StringParameterValue', name: 'VERSION', value: "$BUILD_NUMBER"],[$class: 'StringParameterValue', name: 'ENVIRONMENT', value: "$ENVIRONMENT"]]
            // } 
        }
        currentBuild.result = "SUCCESS"

    }catch (Exception e) {
        println "Failed at Stage:$STAGE"
        echo e.getMessage()
        currentBuild.result = "FAILURE"

    }
}