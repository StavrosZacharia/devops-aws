properties([
    // buildDiscarder(logRotator( numToKeepStr: '70')),
    disableConcurrentBuilds(),
    parameters([
        choice(name: 'Choice',choices: ["apply", "destroy"],description: ''),
    ])
])

def APPLICATION = "nginx"
def ENVIRONMENT = "dev"
def CHECKOUT_REPO = "https://github.com/StavrosZacharia/devops-aws.git"

def REGION = "eu-central-1"
def credentials = "22193aba-c47d-472b-b166-70a4037f37ed"

node(""){

    try {
        stage("Checkout"){
            STAGE = env.STAGE_NAME
            sh """ rm -rf *"""
            git branch: 'master', credentialsId: '2b001878-b483-4075-b882-df99aba4f688', url: "${CHECKOUT_REPO}"
        }

        stage("Install terraform and plan"){
            STAGE = env.STAGE_NAME
                def terraformVersion = '1.3.1'
                sh "wget https://releases.hashicorp.com/terraform/${terraformVersion}/terraform_${terraformVersion}_linux_amd64.zip"
                sh "unzip -o terraform_${terraformVersion}_linux_amd64.zip"
                sh 'chmod +x terraform'
                sh 'sudo mv terraform /usr/local/bin/terraform'
                sh 'terraform version'
                sh """ ls """
                // sh """ terraform init && terraform plan """
                // sh """ terraform ${Choice} --auto-approve """
        }

        // stage("Upload AWS state file"){
        //     STAGE = env.STAGE_NAME

        //     withCredentials([gitUsernamePassword(credentialsId: '3b8ae5f6-eb36-4083-80d6-3660ffb4a376', gitToolName: 'Default')]) {
        //         sh """ 
        //             git add -A
        //             git diff-index --quiet HEAD || git commit -m "Jenkins commit stage"
        //             git push --set-upstream origin master
        //         """
        //     }
        // }
        
        currentBuild.result = "SUCCESS"

    }catch (Exception e) {
        println "Failed at Stage:$STAGE"
        echo e.getMessage()
        currentBuild.result = "FAILURE"

    }
}