
def deploy

deploy = true
println "Deploying for staging..."
EKS_BRANCH = "development"
EKS_REPO = "https://github.com/bdswiss/devops-kubernetes.git"
credentials = "d1bb50ff-31cc-4223-bd0b-9698426ac403"


node("master"){

    try {

        if(deploy == true){
            
            stage("Checkout"){
                STAGE = env.STAGE_NAME
                withCredentials([gitUsernamePassword(credentialsId: '3b8ae5f6-eb36-4083-80d6-3660ffb4a376', gitToolName: 'Default')]) {
                    sh"""
                        rm -rf * || true
                        git config --global user.email "development@bdswiss.com"
                        git clone -b ${EKS_BRANCH} ${EKS_REPO}
                    """
                }
            }

            stage("Versioning"){
                STAGE = env.STAGE_NAME
                sh"""
                    cat ./devops-kubernetes/bdswiss/applications/$APPLICATION/values.yaml | grep image | cut -d : -f 3 > current_version
                    cat ./devops-kubernetes/bdswiss/applications/$APPLICATION/values.yaml | grep namespace | cut -d : -f 2 > namespace
                """

                namespace = readFile('namespace').trim()
                current_version = readFile('current_version').trim()
                println ('Namespace: ' + namespace)
                println ('Current version: ' + current_version)
            }

            stage("Deploy to EKS"){
                STAGE = env.STAGE_NAME
                BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].shortDescription} / ${currentBuild.getBuildCauses()[0].userId}"
                echo "BUILD_TRIGGER_BY: ${BUILD_TRIGGER_BY}"
                    
                withCredentials([gitUsernamePassword(credentialsId: '3b8ae5f6-eb36-4083-80d6-3660ffb4a376', gitToolName: 'Default')]) {
                        
                    sh """ 
                        cd ./devops-kubernetes/bdswiss/applications/$APPLICATION
                        sed -i 's#image\\:.*#image: /$APPLICATION:$VERSION#g' values.yaml
                        sed -i 's#version\\:.*#version: $APPLICATION-$VERSION#g' values.yaml
                        
                        git add values.yaml
                        git commit -m "Jenkins commit $JOB_BASE_NAME-$BUILD_ID" -m '$BUILD_TRIGGER_BY'
                        git push --set-upstream origin ${EKS_BRANCH}
                    """
                }

                withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID', credentialsId: credentials, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh """
                        ARGO_PASSWORD=\$(kubectl -n argocd get secret argocd-initial-admin-secret --kubeconfig ~/.kube/$ENVIRONMENT-eks -o jsonpath="{.data.password}"|base64 -d;echo)
                        ARGO_SERVER=\$(kubectl -n argocd get pods -l app.kubernetes.io/name=argocd-server -o jsonpath="{.items[0].metadata.name}" --kubeconfig ~/.kube/$ENVIRONMENT-eks)
                        kubectl -n argocd --kubeconfig ~/.kube/$ENVIRONMENT-eks exec -ti \$ARGO_SERVER -- argocd login localhost:8080 --insecure --username admin --password \$ARGO_PASSWORD
                        kubectl -n argocd --kubeconfig ~/.kube/$ENVIRONMENT-eks exec -ti \$ARGO_SERVER -- bash -c "argocd app list && argocd app sync $APPLICATION && argocd app list || true"
                    """

                    if(APPLICATION.contains("website")){
                        sleep 100
                    }

                    try{
                        sh""" kubectl get pods -n $namespace | grep Error | awk '{print \$1}' | xargs kubectl delete pod -n $namespace --kubeconfig ~/.kube/$ENVIRONMENT-eks || true"""
                        sh""" kubectl -n $namespace wait --for=condition=ready pod -l version=$APPLICATION-$VERSION --timeout=80s --kubeconfig ~/.kube/$ENVIRONMENT-eks"""
                    }catch(Exception wait){
                        sh""" kubectl -n $namespace wait --for=condition=ready pod -l version=$APPLICATION-$VERSION --timeout=80s --kubeconfig ~/.kube/$ENVIRONMENT-eks"""
                    }
                }
            } 
        }

        currentBuild.result = "SUCCESS"

    }catch (Exception e) {
        println "Failed at Stage:$STAGE"
        echo e.getMessage()
        currentBuild.result = "FAILURE"

        if (STAGE == 'Deploy to EKS' && currentBuild.result == "FAILURE"){

            print ('Rollback....')
            withCredentials([gitUsernamePassword(credentialsId: '3b8ae5f6-eb36-4083-80d6-3660ffb4a376', gitToolName: 'Default')]) {
                    
                sh """ 
                    cd ./devops-kubernetes/bdswiss/applications/$APPLICATION
                    sed -i 's#image\\:.*#image: /$APPLICATION:$current_version#g' values.yaml
                    sed -i 's#version\\:.*#version: $APPLICATION-$current_version#g' values.yaml
                        
                    git add values.yaml
                    git commit -m "Jenkins commit $JOB_BASE_NAME-$BUILD_ID" -m '$BUILD_TRIGGER_BY'
                    git push --set-upstream origin ${EKS_BRANCH}
                """
            }

            withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID', credentialsId: credentials, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                print ('============== Logs ===============')
                
                sh """
                    kubectl --kubeconfig ~/.kube/$ENVIRONMENT-eks get pods -n $namespace --no-headers=true -o custom-columns="POD:.metadata.name" | xargs -I {} kubectl --kubeconfig ~/.kube/$ENVIRONMENT-eks logs -n $namespace {} || true

                    ARGO_PASSWORD=\$(kubectl -n argocd get secret argocd-initial-admin-secret --kubeconfig ~/.kube/$ENVIRONMENT-eks -o jsonpath="{.data.password}"|base64 -d;echo)
                    ARGO_SERVER=\$(kubectl -n argocd get pods -l app.kubernetes.io/name=argocd-server -o jsonpath="{.items[0].metadata.name}" --kubeconfig ~/.kube/$ENVIRONMENT-eks)
                    kubectl -n argocd --kubeconfig ~/.kube/$ENVIRONMENT-eks exec -ti \$ARGO_SERVER -- argocd login localhost:8080 --insecure --username admin --password \$ARGO_PASSWORD
                    kubectl -n argocd --kubeconfig ~/.kube/$ENVIRONMENT-eks exec -ti \$ARGO_SERVER -- bash -c "argocd app list && argocd app sync $APPLICATION && argocd app list || true"
                """

                if(APPLICATION.contains("website")){
                    sleep 100
                }

                try{
                    sh""" kubectl get pods -n $namespace | grep Error | awk '{print \$1}' | xargs kubectl delete pod -n $namespace --kubeconfig ~/.kube/$ENVIRONMENT-eks || true"""
                    sh""" kubectl -n $namespace wait --for=condition=ready pod -l version=$APPLICATION-$VERSION --timeout=80s --kubeconfig ~/.kube/$ENVIRONMENT-eks"""
                }catch(Exception wait){
                    sh""" kubectl -n $namespace wait --for=condition=ready pod -l version=$APPLICATION-$VERSION --timeout=80s --kubeconfig ~/.kube/$ENVIRONMENT-eks"""
                }
            }
        }

    }finally{

        if( currentBuild.result == "FAILURE" ) { 
            slackSend (color: "danger", channel: 'jenkins_builds', message: "*${currentBuild.result}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed at stage:$STAGE. \n More info at: ${env.BUILD_URL}")
        }
    }
}
